// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rewards.Data.Models;

namespace Rewards.Data.Migrations
{
    [DbContext(typeof(RewardsEntities))]
    partial class RewardsEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Rewards.Data.Models.DiscountPromotion", b =>
                {
                    b.Property<string>("DiscountPromotionId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<string>("PromotionName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("DiscountPromotionId")
                        .HasName("PrimaryKey_DiscountPromotionId");

                    b.ToTable("DiscountPromotions");

                    b.HasData(
                        new { DiscountPromotionId = "DP001", DiscountPercent = 20m, EndDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), PromotionName = "Fuel Discount Promo", StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { DiscountPromotionId = "DP002", DiscountPercent = 15m, EndDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), PromotionName = "Happy Promo", StartDate = new DateTime(2020, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Rewards.Data.Models.DiscountPromotionProduct", b =>
                {
                    b.Property<int>("DiscountPromotionsProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiscountPromotionId");

                    b.Property<string>("ProductId");

                    b.HasKey("DiscountPromotionsProductID")
                        .HasName("PrimaryKey_DiscountPromotionsProductID");

                    b.HasIndex("DiscountPromotionId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountPromotionProducts");

                    b.HasData(
                        new { DiscountPromotionsProductID = 1, DiscountPromotionId = "DP001", ProductId = "PRD01" },
                        new { DiscountPromotionsProductID = 2, DiscountPromotionId = "DP001", ProductId = "PRD02" }
                    );
                });

            modelBuilder.Entity("Rewards.Data.Models.PointsPromotion", b =>
                {
                    b.Property<string>("PointsPromotionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("PointsPerDollar")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PromotionName");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.HasKey("PointsPromotionId")
                        .HasName("PrimaryKey_PointsPromotionId");

                    b.ToTable("PointsPromotions");

                    b.HasData(
                        new { PointsPromotionId = "PP001", Category = "Any", EndDate = new DateTime(2020, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), PointsPerDollar = 2m, PromotionName = "New Year Promo", StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { PointsPromotionId = "PP002", Category = "Fuel", EndDate = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), PointsPerDollar = 3m, PromotionName = "Fuel Promo", StartDate = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { PointsPromotionId = "PP003", Category = "Shop", EndDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), PointsPerDollar = 4m, PromotionName = "Shop Promo", StartDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("Rewards.Data.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId")
                        .HasName("PrimaryKey_ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = "PRD01", Category = "Fuel", ProductName = "Vortex 95", UnitPrice = 1.2m },
                        new { ProductId = "PRD02", Category = "Fuel", ProductName = "Vortex 98", UnitPrice = 1.3m },
                        new { ProductId = "PRD03", Category = "Fuel", ProductName = "Diesel", UnitPrice = 1.1m },
                        new { ProductId = "PRD04", Category = "Shop", ProductName = "Twix 55g", UnitPrice = 2.3m },
                        new { ProductId = "PRD05", Category = "Shop", ProductName = "Mars 72g", UnitPrice = 5.1m },
                        new { ProductId = "PRD06", Category = "Shop", ProductName = "SNICKERS 72G", UnitPrice = 3.4m },
                        new { ProductId = "PRD07", Category = "Shop", ProductName = "Bounty 363g", UnitPrice = 6.9m },
                        new { ProductId = "PRD08", Category = "Shop", ProductName = "Snickers 50g", UnitPrice = 4.0m }
                    );
                });

            modelBuilder.Entity("Rewards.Data.Models.DiscountPromotionProduct", b =>
                {
                    b.HasOne("Rewards.Data.Models.DiscountPromotion", "DiscountPromotion")
                        .WithMany("DiscountPromotionProducts")
                        .HasForeignKey("DiscountPromotionId")
                        .HasConstraintName("FK_DiscountPromotionProducts_DiscountPromotion");

                    b.HasOne("Rewards.Data.Models.Product", "Product")
                        .WithMany("DiscountPromotionProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_DiscountPromotionProducts_Product");
                });
#pragma warning restore 612, 618
        }
    }
}
